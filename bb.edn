{:deps {org.babashka/cli {:mvn/version "0.3.30"}}
 :tasks {:requires ([cheshire.core :as json]
                    [clojure.java.shell :refer [sh]]
                    [babashka.cli :as cli]
                    [babashka.process :refer [process]]
                    [clojure.string :as str])
         :init (do (def apps {:staging "sparkboard-jvm-staging"
                              :prod "sparkboard-jvm"})
                   (def options (cli/parse-opts *command-line-args* {:aliases {:e :env :a :app}}))
                   (def env (:env options :staging))
                   (def app (:app options (apps env))))
         server (shell "yarn shadow-cljs -A:datalevin server")
         dev (do (shell "rm -rf ./classes")
                 (shell "yarn shadow-cljs -A:dev:datalevin clj-run org.sparkboard.dev/start"))
         cljs (do (shell "yarn install")
                  (shell "yarn shadow-cljs release web"))
         clj (do (shell "mkdir -p classes")
                 (shell "clojure -A:uberdeps:datalevin -X:aot")
                 (shell "clojure -A:uberdeps:datalevin -X:uberjar"))
         build (do (run 'cljs)
                   (run 'clj))

         fly:set-secrets (let [path (str "src/." (name env) ".config.edn")]
                       (if-let [secrets (slurp path)]
                         (shell {:in secrets} (str "fly -a " app " secrets set SPARKBOARD_CONFIG=-"))
                         (prn (str "No secrets found: " path))))
         fly:down (shell (str "fly -a " app " scale count 0"))
         fly:up (shell (str "fly -a " app " scale count 1"))
         fly:clj (do (run 'clj) (run 'fly:deploy))
         fly:deploy (shell (str "flyctl deploy -a " app))
         fly:deploy-ci (shell (str "flyctl deploy -a " app " --remote-only"))
         fly (shell (str "fly -a " app " " (str/join " " *command-line-args*)))

         build-report (shell "yarn shadow-cljs run shadow.cljs.build-report web report.html")
         run (shell "java -jar target/sparkboard.jar")

         ;; this step is run manually after verifying a staging build.
         staging:promote (let [{:strs [Registry Repository Tag]} (-> (shell {:out :string}
                                                                       (str "flyctl image show -a " (:staging apps) " --json"))
                                                                   :out
                                                                   json/parse-string)
                               image (str Registry "/" Repository ":" Tag)]
                           (shell (str "flyctl deploy -a " (:prod apps) " --image " image)))}}